centralGravity = 0.2),
timestep = 0.75,
stabilization = TRUE) %>%
addFontAwesome(version = "5.13.0") %>%
visLayout(randomSeed = 12)
visNetwork(node_list,
weighted_edges,
height = "700px",
width = "100%") %>%
visEdges(color = "#c7bbc9") %>%
visNodes(shape = "circle",
shadow = list(enabled = TRUE,
size = 5)) %>%
visGroups(groupname = "Galactic Republic",
shape = "icon",
icon = list(code = "f50c",
color = "#A44920")) %>%
visGroups(groupname = "Jedi Order",
shape = "icon",
icon = list(code = "f50e",
color = "#4BA1F0")) %>%
visGroups(groupname = "Galactic Empire",
shape = "icon",
icon = list(code = "f1d1",
color = "#741D2F",
size = 100)) %>%
visGroups(groupname = "Sith Order",
shape = "icon",
icon = list(face = "'Font Awesome 5 Free'",
code = "f512",
color = "#912721",
size = 100)) %>%
visGroups(groupname = "Hutt Cartel",
shape = "icon",
icon = list(code = "f0fd",
color = "#ffcc5c",
size = 100)) %>%
visGroups(groupname = "Unknown",
shape = "icon",
icon = list(code = "f059",
color = "#DEDCE4"))  %>%
visInteraction(navigationButtons = TRUE,
hover = TRUE) %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(solver = "repulsion",
repulsion = list(nodeDistance = 400,
springlength = 300,
centralGravity = 0.2),
timestep = 0.75,
stabilization = TRUE) %>%
addFontAwesome() %>%
visLayout(randomSeed = 12)
# Chunk 1
library(knitr)
library(kableExtra)
library(tidyverse)
library(downloadthis)
library(here)
# Chunk 2: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
library(igraph)
# Chunk 4
package_list_igraph <-
tibble(
name <- c("`igraph`"),
description <-
c("A cross platform package used for analysing and visualizing networks"
),
github <-
c("[Github](https://github.com/igraph/igraph){target='_blank'}"
),
example <-
c("[Tutorial](https://kateto.net/netscix2016.html){target='_blank'}"
),
.name_repair = "minimal"
)
# Chunk 5
package_list_igraph %>%
kbl(col.names = c("Library", "Description", "Repository", "Example"),
"html",
escape = FALSE,
align = 'llcc') %>%
kable_styling(full_width = FALSE) %>%
column_spec(1, width = "10em") %>%
column_spec(2, width = "30em") %>%
column_spec(3, width = "10em") %>%
column_spec(4, width = "10em") %>%
row_spec(1, extra_css = 'vertical-align: middle !important;')
# Chunk 7
edges <- read_csv(here("static", "data", "star-wars-network-edges.csv"))
# Chunk 9
nodes <- read_csv(here("static", "data", "star-wars-network-nodes.csv"))
# Chunk 10
head(edges)
# Chunk 11
head(nodes)
# Chunk 12
g <- graph_from_data_frame(d=edges,
vertices=nodes,
directed=FALSE)
# Chunk 13
g
# Chunk 14
vertices <- V(g)
# Chunk 15
network_details <-
tibble(
detail <- c("*`name (v/c)`*",
"*`id (v/n)`*",
"*`weight (e/n)`*",
"*`vertex names`*",
"*`edges`*",
"*`U`*",
"*`N`*",
"*`W`*",
"*`22`*",
"*`60`*"
),
description <-
c("Denoted _name_ is a node attribute and it's a character",
"An id number used by R to distinguish one node from another",
"means _weight_ is an edge attribute and it's numeric^[Typically indicates importance.]",
"Values in a network",
"Connection between nodes",
"Undirected which implies that direction between nodes do not matter",
"Named graph implying that the nodes are labeled",
"Indicating that this is a weighted graph which, as noted earlier, is a default parameter",
"The total number of nodes",
"The total number of edges"
),
example <-
c("*`CHEWBACCA`*",
"*`1`*",
"*`1`*^[Note that everything in this data set is weighted so the weight is *not shown*. However we could add another column with just weights if there was a reason to do so like force users get a weight of *`2`* abd everyone else receives a *`1`*.]",
"*`CHEWBACCA`*",
"*`--LUKE`*",
"",
"",
"",
"*`22`*",
"*`60`*"
),
.name_repair = "minimal"
)
# Chunk 16
network_details %>%
kbl(col.names = c("Detail", "Description", "Example"),
"html",
escape = FALSE,
align = 'llc') %>%
kable_styling(full_width = FALSE) %>%
column_spec(1, width = "10em") %>%
column_spec(2, width = "30em") %>%
column_spec(3, width = "10em") %>%
row_spec(1, extra_css = 'vertical-align: middle !important;')
# Chunk 17
g[1,]
# Chunk 18
plot(g)
# Chunk 19
plot(g,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = 0.75, # change size of labels to 75% of original size
edge.curved = 0.25, # add a 25% curve to the edges
edge.color = "#333333") # change edge color to grey20
# Chunk 20
V(g)$size <- strength(g)
plot(g)
# taking the log to improve it
V(g)$size <- log(strength(g)) * 4 + 3
plot(g)
V(g)$label <- ifelse( strength(g)>=10,
V(g)$name,
NA )
plot(g)
# Think about what `ifelse()` does
nodes$name=="R2-D2"
ifelse(nodes$name=="R2-D2", "yes", "no")
ifelse(grepl("R", nodes$name), "yes", "no")
# Chunk 21
# create vectors with characters in each side
dark_side <- c("DARTH VADER", "MOTTI", "TARKIN")
light_side <- c("R2-D2", "CHEWBACCA", "C-3PO", "LUKE", "CAMIE", "BIGGS",
"LEIA", "BERU", "OWEN", "OBI-WAN", "HAN", "DODONNA",
"GOLD LEADER", "WEDGE", "RED LEADER", "RED TEN", "GOLD FIVE")
other <- c("GREEDO", "JABBA")
# node we'll create a new color variable as a node property
V(g)$color <- NA
V(g)$color[V(g)$name %in% dark_side] <- "red"
V(g)$color[V(g)$name %in% light_side] <- "gold"
V(g)$color[V(g)$name %in% other] <- "grey20"
vertex_attr(g)
plot(g)
# Think about what `%in%` does
1 %in% c(1,2,3,4)
1 %in% c(2,3,4)
# Chunk 22
plot(g)
legend(x = 0.75,
y = 0.75,
legend = c("Dark side", "Light side", "Other"),
pch=21,
pt.bg = c("red", "gold", "grey20"),
pt.cex = 2,
bty = "n")
# Chunk 23
E(g)$width <- log(E(g)$weight) + 1
edge_attr(g)
plot(g)
# Chunk 24
par(mfrow=c(2, 3), mar=c(0,0,1,0))
plot(g, layout=layout_randomly, main="Random")
plot(g, layout=layout_in_circle, main="Circle")
plot(g, layout=layout_as_star, main="Star")
plot(g, layout=layout_as_tree, main="Tree")
plot(g, layout=layout_on_grid, main="Grid")
plot(g, layout=layout_with_fr, main="Force-directed")
# Chunk 25
l <- layout_randomly(g)
str(l)
# Chunk 26
par(mfrow=c(1,2))
set.seed(777)
fr <- layout_with_fr(g, niter=1000)
par(mar=c(0,0,0,0)); plot(g, layout=fr)
set.seed(666)
fr <- layout_with_fr(g, niter=1000)
plot(g, layout=fr)
# Chunk 27
sort(degree(g))
# Chunk 28
sort(strength(g))
# Chunk 29
sort(closeness(g, normalized=TRUE))
# Chunk 30
sort(betweenness(g))
# Chunk 31
sort(eigen_centrality(g)$vector)
# Chunk 32
sort(page_rank(g)$vector)
# Chunk 33
sort(authority_score(g)$vector)
# Chunk 34
neighbors(g, v=which(V(g)$name=="DARTH VADER"))
ego(g, order=2, nodes=which(V(g)$name=="DARTH VADER"))
# Chunk 35
diameter(g, directed=FALSE, weights=NA)
get_diameter(g, directed=FALSE, weights=NA)
mean_distance(g, directed=FALSE)
dist <- distances(g, weights=NA)
dist[1:5, 1:5]
# Chunk 36
edge_density(g)
# 22*21 possible edges / 2 because it's undirected = 231 possible edges
# but only 60 exist
60/((22*21)/2)
# Chunk 37
reciprocity(g)
# Why is it 1?
# Chunk 38
transitivity(g)
# Chunk 39
components(g)
par(mar=c(0,0,0,0)); plot(g)
# Chunk 40
giant <- decompose(g)[[1]]
# Chunk 41
cluster_walktrap(giant)
cluster_walktrap(giant, steps=10)
# Chunk 42
cluster_fast_greedy(giant)
cluster_edge_betweenness(giant)
cluster_infomap(giant)
cluster_label_prop(giant)
# Chunk 43
comm <- cluster_infomap(giant)
modularity(comm) # modularity score
par(mar=c(0,0,0,0)); plot(comm, giant)
# Chunk 44
V(giant)$color <- membership(comm)
par(mar=c(0,0,0,0)); plot(giant)
# Chunk 45
coreness(g)
which(coreness(g)==6) # what is the core of the network?
which(coreness(g)==1) # what is the periphery of the network?
# Visualizing network structure
V(g)$coreness <- coreness(g)
par(mfrow=c(2, 3), mar=c(0.1,0.1,1,0.1))
set.seed(777); fr <- layout_with_fr(g)
for (k in 1:6){
V(g)$color <- ifelse(V(g)$coreness>=k, "orange", "grey")
plot(g, main=paste0(k, '-core shell'), layout=fr)
}
# Chunk 46
library(tidyverse)
# Chunk 47
nodes
# Chunk 48
edges
# Chunk 49
library(network)
# Chunk 50
starwars_network <-
network(edges,
vertex.attr = nodes,
matrix.type = "edgelist",
ignore.eval = FALSE)
# Chunk 51
class(starwars_network)
# Chunk 52
summary(starwars_network)
# Chunk 53
plot(starwars_network)
# Chunk 54
plot(starwars_network,
vertex.cex = 3)
# Chunk 55
plot(starwars_network,
vertex.cex = 3,
mode = "circle")
# Chunk 56
plot(starwars_network,
vertex.cex = 3,
mode = "kamadakawai")
# Chunk 57
library(tidygraph)
library(ggraph)
# Chunk 58
detach(package:network)
# Chunk 59
rm(starwars_network)
# Chunk 60
starwars_tidy <-
tbl_graph(nodes = nodes,
edges = edges,
directed = FALSE)
# Chunk 61
class(starwars_tidy)
# Chunk 62
starwars_tidy
# Chunk 63
starwars_tidy %>%
activate(edges) %>%
arrange(desc(weight))
# Chunk 64
ggraph(starwars_tidy) +
geom_edge_link() +
geom_node_point() +
theme_graph()
# Chunk 65
ggraph(starwars_tidy,
layout = "graphopt") +
geom_edge_link(aes(width = weight),
alpha = 0.5,
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 1.2)) +
geom_node_point(aes(size = centrality_pagerank(),
fill = centrality_degree()),
shape = 21,
stroke = 1.4,
color = "#4d194d",
show.legend = FALSE) +
scale_size(range = c(1, 14)) +
scale_fill_gradient(low = "#81b29a", high = "#3d405b") +
geom_node_label(aes(label = name),
repel = TRUE) +
coord_fixed() +
theme_graph()
# Chunk 66
ggraph(starwars_tidy,
layout = "linear",
circular = TRUE) +
geom_edge_arc(aes(width = weight,
color = weight),
alpha = 0.8,
show.legend = FALSE) +
scale_edge_width(range = c(0.2, 2)) +
scale_edge_color_gradient(low = "#b7094c", high = "#0091ad") +
geom_node_label(aes(label = name,
size = centrality_betweenness()),
show.legend = FALSE) +
scale_size(range = c(3, 6)) +
theme_graph()
# Chunk 67
library(visNetwork)
library(networkD3)
# Chunk 68
edge_list <-
starwars_tidy %>%
activate(edges) %>%
data.frame()
# Chunk 69
edge_list
# Chunk 70
node_list <-
starwars_tidy %>%
activate(nodes) %>%
data.frame() %>%
rename(label = name) %>%
rename(group = allegiance)
# Chunk 71
node_list
# Chunk 72
visNetwork(node_list,
edge_list)
# Chunk 73
weighted_edges <- mutate(edge_list,
width = weight/4 + 1)
weighted_edges
visNetwork(node_list,
weighted_edges,
height = "700px",
width = "100%") %>%
visEdges(color = "#c7bbc9") %>%
visNodes(shape = "circle",
shadow = list(enabled = TRUE,
size = 5)) %>%
visGroups(groupname = "Galactic Republic",
shape = "icon",
icon = list(code = "f50c",
color = "#A44920")) %>%
visGroups(groupname = "Jedi Order",
shape = "icon",
icon = list(code = "f50e",
color = "#4BA1F0")) %>%
visGroups(groupname = "Galactic Empire",
shape = "icon",
icon = list(code = "f1d1",
color = "#741D2F",
size = 100)) %>%
visGroups(groupname = "Sith Order",
shape = "icon",
icon = list(face = "'Font Awesome 5 Free'",
code = "f512",
color = "#912721",
size = 100)) %>%
visGroups(groupname = "Hutt Cartel",
shape = "icon",
icon = list(code = "f0fd",
color = "#ffcc5c",
size = 100)) %>%
visGroups(groupname = "Unknown",
shape = "icon",
icon = list(code = "f059",
color = "#DEDCE4"))  %>%
visInteraction(navigationButtons = TRUE,
hover = TRUE) %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(solver = "repulsion",
repulsion = list(nodeDistance = 400,
springlength = 300,
centralGravity = 0.2),
timestep = 0.75,
stabilization = TRUE) %>%
addFontAwesome(version = "5.13.0") %>%
visLayout(randomSeed = 12)
visNetwork(node_list,
weighted_edges,
height = "700px",
width = "100%") %>%
visEdges(color = "#c7bbc9") %>%
visNodes(shape = "circle",
shadow = list(enabled = TRUE,
size = 5)) %>%
visGroups(groupname = "Galactic Republic",
shape = "icon",
icon = list(code = "f50c",
color = "#A44920")) %>%
visGroups(groupname = "Jedi Order",
shape = "icon",
icon = list(face = "'Font Awesome 5 Free'",
code = "f50e",
color = "#4BA1F0")) %>%
visGroups(groupname = "Galactic Empire",
shape = "icon",
icon = list(code = "f1d1",
color = "#741D2F",
size = 100)) %>%
visGroups(groupname = "Sith Order",
shape = "icon",
icon = list(face = "'Font Awesome 5 Free'",
code = "f512",
color = "#912721",
size = 100)) %>%
visGroups(groupname = "Hutt Cartel",
shape = "icon",
icon = list(code = "f0fd",
color = "#ffcc5c",
size = 100)) %>%
visGroups(groupname = "Unknown",
shape = "icon",
icon = list(code = "f059",
color = "#DEDCE4"))  %>%
visInteraction(navigationButtons = TRUE,
hover = TRUE) %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(solver = "repulsion",
repulsion = list(nodeDistance = 400,
springlength = 300,
centralGravity = 0.2),
timestep = 0.75,
stabilization = TRUE) %>%
addFontAwesome(version = "5.13.0") %>%
visLayout(randomSeed = 12)
