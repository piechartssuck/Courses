backbone_plot <-
ggraph(g,
layout="manual",
x=bb$xy[,1],
y=bb$xy[,2])+
geom_edge_link0(aes(col=col),
color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
scale_edge_color_manual(values=c(rgb(0,0,0,0.3),rgb(0,0,0,1)))+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Backbone Layout with Reduction")
backbone_plot
backbone_comp <- hairball + backbone_plot
backbone_comp
ggsave("backbone_layout.pdf",
backbone_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
# Chord ----
chord_diagram <-
ggraph(g,
layout="linear",
circular = TRUE)+
geom_edge_arc(aes(col=col),
color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
scale_edge_color_manual(values=c(rgb(0,0,0,0.3),rgb(0,0,0,1)))+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Chord Diagram")
chord_diagram
chord_comp <- hairball + chord_diagram
chord_comp
ggsave("chord_diagram.pdf",
chord_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
g
V(g)$grp
g
#create network with a group structure
g <- sample_islands(9,40,0.4,15) %>%
simplify()
#create network with a group structure
g <- sample_islands(9,40,0.4,15) %>%
simplify() %>%
as_tbl_graph()
g
sample_islands(9,40,0.4,15)
sample_islands(9,40,0.4,15) %>%
simplify()
sample_islands(9,40,0.4,15) %>%
simplify() %>%
as_tbl_graph()
#create network with a group structure
g <- sample_islands(9,40,0.4,15) %>%
simplify() %>%
as_tbl_graph()
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
E(g)$col <- F
E(g)$col[bb$backbone] <- T
#create network with a group structure
g <- sample_islands(9,40,0.4,15) %>%
simplify()
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
E(g)$col <- F
# Hairball ----
set.seed(665)
#create network with a group structure
g <- sample_islands(9,40,0.4,15) %>%
simplify()
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
#create network with a group structure
g <- sample_islands(9,40,0.4,15)
g <- simplify(g)
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggraph)
library(tidygraph)
library(igraph)
library(graphlayouts)
library(tidyverse)
library(patchwork)
library(showtext)
showtext_auto()
# Hairball ----
set.seed(665)
#create network with a group structure
g <- sample_islands(9,40,0.4,15)
g <- simplify(g)
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggraph)
library(tidygraph)
library(igraph)
library(graphlayouts)
library(tidyverse)
library(patchwork)
library(showtext)
showtext_auto()
# Hairball ----
set.seed(665)
#create network with a group structure
g <- sample_islands(9,40,0.4,15)
g <- simplify(g)
V(g)$grp <- as.character(rep(1:9,each=40))
library(ggraph)
library(tidygraph)
library(igraph)
library(graphlayouts)
library(tidyverse)
library(patchwork)
library(showtext)
showtext_auto()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Hairball ----
set.seed(665)
#create network with a group structure
g <- sample_islands(9,40,0.4,15)
g <- simplify(g)
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
g
?simplify
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggraph)
library(tidygraph)
library(igraph)
library(graphlayouts)
library(tidyverse)
library(patchwork)
library(showtext)
showtext_auto()
set.seed(665)
#create network with a group structure
g <- sample_islands(9,40,0.4,15)
g <- simplify(g)
V(g)$grp <- as.character(rep(1:9,each=40))
hairball <-
ggraph(g,layout = "stress") +
geom_edge_link0(color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp))+
scale_color_brewer(palette = "Spectral")+
theme_graph()+
theme(legend.position = "none",
aspect.ratio = 1) +
ggtitle("Random Hairball")
bb <- layout_as_backbone(g,keep=0.4)
g <- simplify(g)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggraph)
library(tidygraph)
library(igraph)
library(graphlayouts)
library(tidyverse)
library(patchwork)
library(sankeyD3)
library(showtext)
font_add(family = "Roboto Condensed",
regu
lar = "RobotoCondensed-Regular.ttf",
bold = "RobotoCondensed-Bold.ttf",
italic = "RobotoCondensed-Italic.ttf")
showtext_auto()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggraph)
library(tidygraph)
library(igraph)
library(graphlayouts)
library(tidyverse)
library(patchwork)
library(sankeyD3)
library(showtext)
font_add(family = "Roboto Condensed",
regular = "RobotoCondensed-Regular.ttf",
bold = "RobotoCondensed-Bold.ttf",
italic = "RobotoCondensed-Italic.ttf")
showtext_auto()
set.seed(665)
#create network with a group structure
g <- sample_islands(9, 40, 0.4, 15)
g <- igraph::simplify(g)
V(g)$grp <- as.character(rep(1:9, each = 40))
# Hairball ----
hairball <-
ggraph(g,layout = "kk") +
geom_edge_link0(color="#b0b8c5",
width=0.05) +
geom_node_point(aes(col=grp),
size = 1.5) +
scale_color_brewer(palette = "Spectral") +
theme_graph(base_family = "Roboto Condensed") +
theme(legend.position = "none",
aspect.ratio = 1,
plot.title = element_text(face = "bold")) +
ggtitle("Random Hairball")
hairball
# Arc ----
arc_plot <-
ggraph(g,
layout="linear")+
geom_edge_arc(aes(col=col),
color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp),
size = 1.5) +
scale_color_brewer(palette = "Spectral") +
theme_graph(base_family = "Roboto Condensed") +
scale_edge_color_manual(values=c(rgb(0,0,0,0.3),rgb(0,0,0,1)))+
theme(legend.position = "none",
aspect.ratio = 1,
plot.title = element_text(face = "bold")) +
ggtitle("Arc Diagram")
arc_plot
arc_comp <- hairball + arc_plot
arc_comp
ggsave("arc_plot.pdf",
arc_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
# Backbone ----
bb <- layout_as_backbone(g,keep=0.4)
E(g)$col <- F
E(g)$col[bb$backbone] <- T
backbone_plot <-
ggraph(g,
layout="manual",
x=bb$xy[,1],
y=bb$xy[,2])+
geom_edge_link0(aes(col=col),
color="#b0b8c5",
width=0.06)+
geom_node_point(aes(col=grp),
size = 1.5)+
scale_color_brewer(palette = "Spectral")+
scale_edge_color_manual(values=c(rgb(0,0,0,0.3),rgb(0,0,0,1)))+
theme_graph(base_family = "Roboto Condensed") +
theme(legend.position = "none",
aspect.ratio = 1,
plot.title = element_text(face = "bold")) +
ggtitle("Backbone Layout with Reduction")
backbone_plot
backbone_comp <- hairball + backbone_plot
backbone_comp
ggsave("backbone_layout.pdf",
backbone_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
# Chord ----
chord_diagram <-
ggraph(g,
layout="linear",
circular = TRUE) +
geom_edge_arc(aes(col=col),
color="#b0b8c5",
width=0.05)+
geom_node_point(aes(col=grp),
size = 1.5) +
scale_color_brewer(palette = "Spectral")+
scale_edge_color_manual(values=c(rgb(0,0,0,0.3),rgb(0,0,0,1)))+
theme_graph(base_family = "Roboto Condensed") +
theme(legend.position = "none",
aspect.ratio = 1,
plot.title = element_text(face = "bold")) +
ggtitle("Chord Diagram")
chord_diagram
chord_comp <- hairball + chord_diagram
chord_comp
ggsave("chord_diagram.pdf",
chord_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
# Hive ----
net_data <- g %>%
as_tbl_graph() %>%
mutate(degree = centrality_degree()) %>%
mutate(rel = ifelse(
centrality_degree(mode = 'in') < 15, 'few',
ifelse(centrality_degree(mode = 'in') >= 20, 'many', 'medium')
))
hive <-
ggraph(net_data,
'hive',
axis = rel,
sort.by = degree) +
geom_edge_hive(aes(col=col),
color="#b0b8c5",
width=0.05) +
geom_axis_hive(aes(color = rel),
size = 1.5,
label = FALSE) +
scale_color_brewer(palette = "Spectral") +
theme_graph(base_family = "Roboto Condensed") +
coord_fixed() +
theme(legend.position = "none",
aspect.ratio = 1,
plot.title = element_text(face = "bold")) +
ggtitle("Hive Plot Subnetwork")
hive
hive_comp <- hairball + hive
hive_comp
ggsave("hive.pdf",
hive_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
# MDScaling ----
mdscaling <-
ggraph(g,
layout = "pmds",
pivots = 30) +
geom_edge_link0(color="#b0b8c5",
width=0.05) +
geom_node_point(aes(col=grp),
size = 1.5) +
scale_color_brewer(palette = "Spectral") +
theme_graph(base_family = "Roboto Condensed") +
theme(legend.position = "none",
aspect.ratio = 1,
plot.title = element_text(face = "bold")) +
ggtitle("Multidimensional Scaling with <100 Pivot Nodes")
mdscaling
mdscaling_comp <- hairball + mdscaling
mdscaling_comp
ggsave("mdscaling.pdf",
mdscaling_comp,
device = cairo_pdf,
bg="transparent",
width = 297,
height = 210,
units = "mm"
)
# Sankey ----
gd3 <- igraph_to_networkD3(g, group = grp)
sankeyNetwork(Links = gd3$links,
Nodes = gd3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
NodeGroup = 'group')
# Sankey ----
gd3 <- igraph_to_networkD3(g, group = grp)
g
igraph_to_networkD3(g, group = grp)
net_data
chord_comp
# Sankey ----
gd3 <- igraph_to_networkD3(g, group = grp)
g
igraph_to_networkD3(g, group = grp)
sankeyNetwork(Links = gd3$links,
Nodes = gd3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
NodeGroup = 'group')
# Sankey ----
gd3 <- igraph_to_networkD3(g)
sankeyNetwork(Links = gd3$links,
Nodes = gd3$nodes,
Source = 'source',
Target = 'target',
NodeID = 'name',
NodeGroup = 'group')
# Sankey ----
gd3 <- igraph_to_networkD3(g, group = grp)
blogdown::build_site()
blogdown::serve_site()
library(tigris)
library(ggplot2)
install.packages("tigris")
library(tigris)
devtools::install_github('walkerke/tigris')
install.packages("rgdal")
devtools::install_github('walkerke/tigris')
library(tigris)
remove.packages("rgdal")
install.packages("rgdal")
library(tigris)
library(tigris)
library(ggplot2)
mon_county <- counties(state = WV)
?counties
wv_spf <- counties(state = "WV")
wv_spf
mon_county <- counties(state = "WV") %>%
filter(NAME == "Monongalia")
class(wv_spf)
mon_county <- counties(state = "WV") %>%
filter.sf(NAME == "Monongalia")
mon_county <- counties(state = "WV") %>%
filter.sf(NAME == "Monongalia")
library(sf)
mon_county <- counties(state = "WV") %>%
filter.sf(NAME == "Monongalia")
mon_county <- counties(state = "WV") %>%
sf::st_filter(NAME == "Monongalia")
mon_county <- counties(state = "WV") %>%
filter(NAME == "Monongalia")
mon_county <- counties(state = "WV")
names(mon_county)
mon_county <- counties(state = "WV") %>%
filter(NAME == "Monongalia")
mon_county
View(mon_county)
mon_county <- counties(state = "WV") %>%
filter(NAME == "Monongalia")
mon_county <- counties(state = "WV") %>%
filter(GEOID == "54005")
library(tidyverse)
mon_county <- counties(state = "WV") %>%
filter(NAME == "Monongalia")
mon_county
library(tigris)
library(sf)
library(tidyverse)
