group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(`negative counts`)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for smpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(total, `negative counts`)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for smpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(total = `negative counts`)
? add_tally
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for smpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(`negative counts`, name = "total")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(`negative counts`, name = "total")
genius_hip_hop_lyrics
genius_hip_hop_lyrics %>%
select(candidate, sentiment)
enius_hip_hop_lyrics %>%
select(candidate, sentiment)
genius_hip_hop_lyrics %>%
select(candidate, sentiment)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate) %>%
add_tally(name = "totals")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate) %>%
add_tally(`sentiment counts`, name = "totals")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate) %>%
add_tally(`sentiment counts`, name = "totals")
install.packages("tidytext")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate) %>%
add_tally(`sentiment counts`, name = "totals")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
group_by(candidate, sentiment) %>%
tally(name = "sentiment counts") %>%
ungroup() %>%
group_by(candidate)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate)
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup()
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(candidate, name = "candidate count")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup()
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(candidate, name = "candidate count")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_count(candidate, name = "candidate count")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(candidate, name = "candidate count")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
add_tally(candidate, name = "candidate count")
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup()
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
#  add_tally(candidate, name = "candidate count") %>%
mutate(meanSentiment = mean(`negative counts`))
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
summarize(meanSentiment = mean(`negative counts`))
negative_means_by_cantidate <- genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculation
tally(name = "negative counts") %>%
ungroup() %>%
summarize(meanSentiment = mean(`negative counts`)) %>%
mutate(meanSentiment = round(meanSentiment))
negative_means_by_cantidate
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculations by candidate
tally(name = "negative counts") %>% # Counts are typically easy due to built in functions. Here is a list of them: https://dplyr.tidyverse.org/reference/tally.html
ungroup() %>% # Get rid of calculations by candidate
summarize(meanSentiment = mean(`negative counts`))
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculations by candidate
tally(name = "negative counts") %>% # Counts are typically easy due to built in functions. Here is a list of them: https://dplyr.tidyverse.org/reference/tally.html
ungroup()
genius_hip_hop_lyrics %>%
select(candidate, sentiment) %>% # for simpilicity, let's just select the two columns we need. When you get comfortable with the syntax, then that's a good point to get rid of this command.
filter(sentiment == "negative") %>% # filtered the sentiment column to only include those that are negative
group_by(candidate) %>% # I just told R to only do calculations by candidate
tally(name = "negative counts") %>% # Counts are typically easy due to built in functions. Here is a list of them: https://dplyr.tidyverse.org/reference/tally.html
ungroup() %>% # Get rid of calculations by candidate
summarize(meanSentiment = mean(`negative counts`)) %>% # Find the mean of all negative counts
mutate(meanSentiment = round(meanSentiment)) # Round up since 11.8 doesn't really make sense
# Emily Kemper
# Task 1
# Load the needed libraries
library(tidyverse)
library(pastecs)
library(fivethirtyeight)
# Bring in the genius_hip_hop_lyrics data set
## --- how you brought in the file is completely fine. I'm going to use the fivethirtyeight package because I'm lazy
genius_hip_hop_lyrics <- fivethirtyeight::hiphop_cand_lyrics
#Calculate the average candidate in the year 2016 ----
data.frame(genius_hip_hop_lyrics)
mean_candidate <- genius_hip_hop_lyrics %>%
filter(album_release_date == 2016) %>%
summarize(Median = median(candidate, na.rm = TRUE))
genius_hip_hop_lyrics %>%
filter(album_release_date == 2016) %>%
summarize(Median = median(candidate, na.rm = TRUE))
genius_hip_hop_lyrics %>%
filter(album_release_date == 2016)
library(pastecs)
# Library
library(streamgraph)
library(webshot)
# Create data ----
data <- data.frame(
year=rep(seq(1990,2020) , each=10),
name=rep(letters[1:10] , 31),
value=sample( seq(0,1,0.0001) , 310),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0)
devtools::install_github("hrbrmstr/streamgraph")
# Library
library(streamgraph)
library(webshot)
# Create data ----
data <- data.frame(
year=rep(seq(1990,2020) , each=10),
name=rep(letters[1:10] , 31),
value=sample( seq(0,1,0.0001) , 310),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0)
# Create data ----
data <- data.frame(
year=rep(seq(1985,2020) , each=10),
name=rep(letters[1:10] , 31),
value=sample( seq(0,1,0.0001) , 310),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0) %>%
webshot(file = "steamgraph.pdf",
delay = 2)
# Create data ----
data <- data.frame(
year=rep(seq(1985,2020) , each=10),
name=rep(letters[1:10] , 31),
value=sample( seq(0,1,0.0001) , 310),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0)
# Create data ----
data <- data.frame(
year=rep(seq(1985,2010) , each=10),
name=rep(letters[1:10] , 31),
value=sample(seq(0,1,0.0001), 310),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0) %>%
webshot(file = "steamgraph.pdf",
delay = 2)
data <- data.frame(
year=rep(seq(1985,2030) , each=10),
name=rep(letters[1:10] , 31),
value=sample(seq(0,1,0.0001), 310),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0)
data <- data.frame(
year=rep(seq(1985,2020) , each=10),
name=rep(letters[1:5] , 31),
value=sample(seq(0,1,0.0001), 310),
stringsAsFactors = FALSE
)
# Basic
# Create data ----
data <- data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10] , 31),
value=sample(seq(0,1,0.0001), 310),
stringsAsFactors = FALSE
)
data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10], 31),
value=sample(seq(0,1,0.0001), 310),
stringsAsFactors = FALSE
)
data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10], 35),
value=sample(seq(0,1,0.0001), 310),
stringsAsFactors = FALSE
)
data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10], 35),
value=sample(seq(0,1,0.0001), 350),
stringsAsFactors = FALSE
)
data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10], 38),
value=sample(seq(0,1,0.0001), 380),
stringsAsFactors = FALSE
)
data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10], 38),
value=sample(seq(0,1,0.0001), 380),
stringsAsFactors = FALSE
)
# Create data ----
data <- data.frame(
year=rep(seq(1985,2022) , each=10),
name=rep(letters[1:10], 38),
value=sample(seq(0,1,0.0001), 380),
stringsAsFactors = FALSE
)
# Basic steamgraph ----
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0) %>%
webshot(file = "steamgraph.pdf",
delay = 2)
streamgraph(data,
key="name",
value="value",
date="year",
height="200px",
width="1000px",
interactive = TRUE) %>%
sg_axis_y(0)
webshot::install_phantomjs
library(webshot)
install.packages("crul")
install.packages("fs")
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark.rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
blogdown::build_site()
setwd("~/Documents/WVU/Teaching/GIthub Workspace/edp619")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub/Workspace/edp619")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp619")
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
install.packages(c("bit64", "fst", "kableExtra", "stplanr", "TTR", "vctrs", "zip"))
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
install.packages("spatialwidget")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp619")
blogdown::build_site()
install.packages(c("ingredients", "mnormt", "systemfonts", "TTR"))
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
install.packages(c("insight", "jsonlite", "officer", "rgeos"))
blogdown::build_site()
install.packages("callr")
blogdown::serve_site()
blogdown::build_site()
shiny::runApp('~/Documents/WVU/Research/WVCTSI/R Things/Shiny Drafts/WVCTSI/WVCTSI_Pubs/pubSearch')
install.packages(c("h2o", "inlmisc", "shinyalert", "xlsx"))
install.packages(c("h2o", "inlmisc", "shinyalert", "xlsx"))
install.packages(c("sf", "shape"))
install.packages(c("ggdendro", "snahelper"))
library(tidyverse)
setwd("~/Desktop/Chapter 3")
read_csv("2012_Voter_Fraud.csv")
voter_fraud <- read_csv("2012_Voter_Fraud.csv")
View(voter_fraud)
voter_fraud$ranges <- recode(voter_fraud$total,
"0:9= '0 - 9 articles';
10:19='10 - 19 articles';
20:29= '20 - 29 articles';
30:39= '30 - 39 articles';
40:49 = '40 - 49 articles'")
recode(voter_fraud$total,
"0:9= '0 - 9 articles';
10:19='10 - 19 articles';
20:29= '20 - 29 articles';
30:39= '30 - 39 articles';
40:49 = '40 - 49 articles'")
voter_fraud
voter_fraud$ranges <- recode(voter_fraud$total,
"0:9= '0 - 9 articles';
10:19='10 - 19 articles';
20:29= '20 - 29 articles';
30:39= '30 - 39 articles';
40:49 = '40 - 49 articles'")
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(voter_fraud$total)
voter_fraud$ranges <- recode(voter_fraud$total,
"0:9= '0 - 9 articles';
10:19='10 - 19 articles';
20:29= '20 - 29 articles';
30:39= '30 - 39 articles';
40:49 = '40 - 49 articles'")
voter_fraud$ranges <- recode(voter_fraud$total,
"0:9= '0 - 9 articles';
10:19='10 - 19 articles';
20:29= '20 - 29 articles';
30:39= '30 - 39 articles';
40:49 = '40 - 49 articles'")
voter_fraud$ranges <- car::recode(voter_fraud$total,
"0:9= '0 - 9 articles';
10:19='10 - 19 articles';
20:29= '20 - 29 articles';
30:39= '30 - 39 articles';
40:49 = '40 - 49 articles'")
