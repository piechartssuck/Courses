geom_node_point(aes(color = community),
size = 2,
show.legend = FALSE) +
coord_equal() +
theme_graph()
# See the separation of a hub node
# Copy of tbl_graph with columns that indicate weather in n - separation of hub.
distancing_network <- function(n) {
tbl_graph %>%
activate(nodes) %>%
mutate(
separation = n,
reachable = ifelse(hub_dist <= n, "reachable", "non_reachable"),
reachable = ifelse(hub_dist == 0, "Hub", reachable)
)
}
# Tidygraph allows to bind graphs. This means binding rows of the node and edge dataframes.
evolving_graph <- bind_graphs(distancing_network(0),
distancing_network(1),
distancing_network(2),
distancing_network(3),
distancing_network(4),
distancing_network(5),
distancing_network(6),
distancing_network(7))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1, alpha = 0.8) +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none")
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1, alpha = 0.8) +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
plot.background = element_rect(fill = '#212121'))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1, alpha = 0.8) +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
plot.background = element_rect(fill = '#212121',
color = '#212121'))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1, alpha = 0.8) +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
panel.background = element_rect(fill = '#212121'))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1,
alpha = 0.8,
color = "#FFFFFF") +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
panel.background = element_rect(fill = '#212121'))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1,
alpha = 0.6,
color = "#FFFFFF") +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
panel.background = element_rect(fill = '#212121'))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1,
alpha = 0.4,
color = "#FFFFFF") +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#5cb85c",
"non_reachable" = "#428bca",
"reachable" = "#d9534f",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
panel.background = element_rect(fill = '#212121'))
library("RColorBrewer")
display.brewer.pal(7, "Spectral")
brewer.pal(7,"Spectral")
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1,
alpha = 0.4,
color = "#FFFFFF") +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#99D594",
"non_reachable" = "#3288BD",
"reachable" = "#D53E4F",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
panel.background = element_rect(fill = '#212121'))
library(tidyverse)
library(fields)
library(ggraph)
library(tidygraph)
library(igraph)
library(Matrix)
## Simulate Data
# Nodes ----
# Create a vector with plane dimensions. The random nodes will be placed on the plane.
plane <- c(1000, 1000)
poisson_para <- 0.5 * 10^(-3) # Poisson intensity parameter
beta <- 0.5 * 10^3
gamma <- 0.7
# Number of nodes is Poisson(gamma) * area - distributed
n_nodes <- rpois(1, poisson_para * plane[1] * plane[2]);n_nodes
weights <- runif(n_nodes) # Uniformly distributed weights
# The Poisson process locally yields node positions that are completely random.
x = plane[1] * runif(n_nodes)
y = plane[2] * runif(n_nodes)
# Connection function
phi <- function(z) {
pmin(z^(-1.8), 1)
}
# Edges ----
# Distance matrix needed as input
dist_matrix <- rdist(tibble(x,y))
weight_matrix <- outer(weights, weights, FUN="*") # Weight matrix
con_matrix_prob <- phi(1/beta * weight_matrix^gamma*dist_matrix^2)# Evaluation
con_matrix <- Matrix(rbernoulli(1,con_matrix_prob), sparse=TRUE) # Sampling
con_matrix <- con_matrix * upper.tri(con_matrix) # Transform to symmetric matrix
adjacency_matrix <- con_matrix + t(con_matrix)
# Visualize ----
# Create Igraph object
graph <- graph_from_adjacency_matrix(adjacency_matrix,
mode="undirected")
# Make a tidygraph object from it. igraph methods can still be called on it.
tbl_graph <- as_tbl_graph(graph)
hub_id <- which.max(degree(graph))
# Add spacial positions, hub distance and degree information to the nodes.
tbl_graph <- tbl_graph %>%
activate(nodes) %>%
mutate(
x = x,
y = y,
hub_dist = replace_na(bfs_dist(root = hub_id), Inf),
degree = degree(graph),
friends_of_friends = replace_na(local_ave_degree(), 0),
cluster = as.factor(group_infomap())
)
# Add coord_fixed() for fixed axis ratio
tbl_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1) +
geom_node_point(aes(size = degree, color = degree)) +
scale_color_gradient(low = "#1c86ee",
high = "#8b1a1a") +
coord_fixed() +
guides(size = FALSE)
# To see more clearly what nodes are essential to the network, the degree,
# which is the number of edges a node is connected with, was highlighted for each node.
# Another way of getting a good overview of the graph is to show a visual decomposition
# of the components.
# Projection
tbl_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1) +
geom_node_point(aes(size = degree,
color = cluster)) +
coord_fixed() +
theme(legend.position = "none")
# Circular
tbl_graph %>%
mutate(community = as.factor(group_infomap())) %>%
ggraph(layout = 'kk') +
geom_edge_link(aes(alpha = ..index..),
show.legend = FALSE) +
geom_node_point(aes(color = community),
size = 2,
show.legend = FALSE) +
coord_equal() +
theme_graph()
# See the separation of a hub node
# Copy of tbl_graph with columns that indicate weather in n - separation of hub.
distancing_network <- function(n) {
tbl_graph %>%
activate(nodes) %>%
mutate(
separation = n,
reachable = ifelse(hub_dist <= n, "reachable", "non_reachable"),
reachable = ifelse(hub_dist == 0, "Hub", reachable)
)
}
# Tidygraph allows to bind graphs. This means binding rows of the node and edge dataframes.
evolving_graph <- bind_graphs(distancing_network(0),
distancing_network(1),
distancing_network(2),
distancing_network(3),
distancing_network(4),
distancing_network(5),
distancing_network(6),
distancing_network(7))
evolving_graph %>%
ggraph(layout = tibble(V(.)$x, V(.)$y)) +
geom_edge_link(width = 0.1,
alpha = 0.4,
color = "#FFFFFF") +
geom_node_point(aes(size = degree,
color = reachable)) +
scale_size(range = c(0.5, 2)) +
scale_color_manual(values = c("Hub" = "#99D594",
"non_reachable" = "#3288BD",
"reachable" = "#D53E4F",
"")) +
coord_fixed() +
facet_nodes(~separation, ncol = 4, nrow = 2, labeller = label_both) +
theme(legend.position = "none",
panel.background = element_rect(fill = '#212121'))
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::check_content()
blogdown::check_config()
blogdown::check_hugo()
blogdown::check_netlify()
blogdown::check_hugo()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
setwd("~/Documents/WVU/Teaching/GitHub.nosync/Workspace/edp617")
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
library(dplyr)
library(fontawesome)
library(knitr)
library(kableExtra)
library(here)
threebars <- as.character(fontawesome::fa("stream", fill = "#019875", height = "15px"))
papers <- tibble(
title <- c('Developing Good Research Questions',
'Toward a conceptual framework for mixed-method evaluation designs',
'Mixed Methods Research Designs in Counseling Psychology',
'The Meanings of Self-Ratings of Health: A Qualitative and Quantitative Approach',
'Crossing Anxious Borders: Teaching Across the Quantitative–Qualitative ‘Divide’',
'Paradigms Lost and Pragmatism Regained',
'Strategies for ensuring trustworthiness in qualitative research projects',
'Depression and Substance Use in Two Divergent High School Cultures: A Quantitative and Qualitative Analysis'
),
Citation <- c(
"Bufkin (2007)",
"Greene, Caracelli, & Graham (1989)",
"Hanson (2005)",
"Idler (1999)",
"Luttrell (2005)",
"Morgan (2006)",
"Shenton (2004)",
"Way, Stauber, Nakkula, & London (1994)"
),
optional <- c(
threebars,
"",
"",
"",
threebars,
threebars,
"",
threebars
),
required <- c(
"",
threebars,
threebars,
threebars,
"",
"",
threebars,
""
),
.name_repair = "minimal"
)
papers %>%
kbl(col.names = c("Title", "Citation", "Optional", "Required"),
"html",
escape = FALSE,
align = 'lccc') %>%
kable_styling(full_width = FALSE) %>%
column_spec(1, width = "30em") %>%
column_spec(2, width = "30em") %>%
column_spec(3, width = "10em") %>%
column_spec(4, width = "10em") %>%
row_spec(0, extra_css = 'vertical-align: middle !important;') %>%
row_spec(1, extra_css = 'vertical-align: middle !important;')  %>%
row_spec(2, extra_css = 'vertical-align: middle !important;') %>%
row_spec(3, extra_css = 'vertical-align: middle !important;')  %>%
row_spec(4, extra_css = 'vertical-align: middle !important;') %>%
row_spec(5, extra_css = 'vertical-align: middle !important;')  %>%
row_spec(6, extra_css = 'vertical-align: middle !important;') %>%
row_spec(7, extra_css = 'vertical-align: middle !important;') %>%
row_spec(8, extra_css = 'vertical-align: middle !important;')
blogdown::serve_site()
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(slidex)
library(here)
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week `0",
"Mixing Methodologie",
"Mixing Methodologie.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week `0",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
loc
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(slidex)
library(here)
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(slidex)
library(here)
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
ls
loc
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixing Methodologies.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
# Set the working directory as source ----
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(slidex)
library(here)
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixed Methods.pptx")
convert_pptx(path = loc, author = "Abhik Roy")
loc
loc <- here::here("Documents",
"WVU",
"Teaching",
"Past",
"EDP 617",
"EDP 617 Spring 2020",
"Weekly Tasks",
"Week 10",
"Mixing Methodologies",
"Mixed Methods.pptx")
getwd
getwd()
loc
here::here()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
remove.packages("rstan")
system.file("libs", "rstan.so", package = "rstan")
install.packages("rstan")
blogdown::build_site()
blogdown::serve_site()
